<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>商品管理</title>

    <!-- 引入 Vue 3 -->
    <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>

    <!-- 引入 Bootstrap 5 -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <style>
        /* 美化 Modal 外觀 */
        .modal-content {
            border-radius: 10px;
        }

        /* 限制圖片大小 */
        .product-image {
            width: 50px;
            height: 50px;
            object-fit: cover;
        }

        /* 禁止 textarea 調整大小 */
        textarea {
            resize: none;
        }
    </style>
</head>
<body>
    <div id="app" class="container mt-5">
        <h2 class="mb-4">📦 商品管理</h2>

        <!-- 新增商品按鈕 -->
        <button class="btn btn-primary mb-3" v-on:click="openModal()">+ 新增商品</button>

        <!-- 商品列表 -->
        <table class="table table-bordered">
            <thead class="table-dark">
                <tr>
                    <th>ID</th>
                    <th>名稱</th>
                    <th>作者</th>
                    <th>出版社</th>
                    <th>價格</th>
                    <th>描述</th>
                    <th>分類 ID</th>
                    <th>促銷 ID</th>
                    <th>發行日期</th>
                    <th>圖片</th>
                    <th>操作</th>
                </tr>
            </thead>
            <tbody>
                <!-- 使用 v-for 渲染商品列表 -->
                <tr v-for="(product, index) in products" :key="product.id">
                    <td>{{ product.id }}</td>
                    <td>{{ product.title }}</td>
                    <td>{{ product.author }}</td>
                    <td>{{ product.publisher }}</td>
                    <td>{{ product.price }}</td>
                    <td>{{ product.description }}</td>
                    <td>{{ product.categoryId }}</td>
                    <td>{{ product.promotionId }}</td>

                    <td>{{ new Date(product.publishDate).toISOString().split('T')[0] }}</td>
                    <td><img :src="product.imageURL" alt="商品圖片" class="product-image"></td>
                    <td>
                        <!-- 編輯按鈕：點擊時開啟 Modal，並傳入 index -->
                        <button class="btn btn-warning btn-sm me-2" v-on:click="openModal(index)">編輯</button>
                        <!-- 刪除按鈕：點擊時執行 deleteProduct(product.id) -->
                        <button class="btn btn-danger btn-sm" v-on:click="deleteProduct(product.id)">刪除</button>
                    </td>
                </tr>
            </tbody>
        </table>

        <!-- 新增/編輯商品 Modal -->
        <div class="modal fade" id="productModal" tabindex="-1" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <!-- 根據 isEditing 來顯示不同標題 -->
                        <h5 class="modal-title">{{ isEditing ? "編輯商品" : "新增商品" }}</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <form v-on:submit.prevent="handleSubmit">
                            <div class="mb-3">
                                <label class="form-label">商品名稱</label>
                                <input type="text" class="form-control" v-model="formData.title" required>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">作者</label>
                                <input type="text" class="form-control" v-model="formData.author">
                            </div>
                            <div class="mb-3">
                                <label class="form-label">出版社</label>
                                <input type="text" class="form-control" v-model="formData.publisher">
                            </div>
                            <div class="mb-3">
                                <label class="form-label">價格</label>
                                <input type="number" class="form-control" v-model="formData.price" required>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">描述</label>
                                <textarea class="form-control" rows="3" v-model="formData.description"></textarea>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">分類 ID</label>
                                <input type="number" class="form-control" v-model="formData.categoryId">
                            </div>
                            <div class="mb-3">
                                <label class="form-label">促銷 ID</label>
                                <input type="number" class="form-control" v-model="formData.promotionId">
                            </div>
                            <div class="mb-3">
                                <label class="form-label">發行日期</label>
                                <input type="date" class="form-control" v-model="formData.publishDate" required>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">圖片 URL</label>
                                <input type="text" class="form-control" v-model="formData.imageURL">
                            </div>
                            <button type="submit" class="btn btn-success w-100">{{ isEditing ? "更新商品" : "儲存" }}</button>
                        </form>
                    </div>

                </div>
            </div>
        </div>
    </div>

    <script>
        const { createApp, ref, onMounted } = Vue;

        createApp({
            setup() {
                const products = ref([]);
                const apiUrl = "/api/products";

                // 商品表單的資料
                const formData = ref({
                    id: null, title: "", author: "", publisher: "", price: null,
                    description: "", categoryId: null, promotionId: null, publishDate: "", imageURL: ""
                });

                const isEditing = ref(false);  // 是否為編輯模式
                let editIndex = null;  // 紀錄編輯的索引
                let modalInstance = null;  // Bootstrap Modal 實例

                // 載入商品列表
                const loadProducts = async () => {
                    try {
                        const response = await fetch(apiUrl);
                        products.value = await response.json();
                    } catch (error) {
                        console.error("載入商品失敗:", error);
                    }
                };

                // 開啟 Modal，決定是「新增」還是「編輯」
                const openModal = (index = null) => {
                    if (!modalInstance) {
                        modalInstance = new bootstrap.Modal(document.getElementById('productModal'));
                    }

                    if (index !== null) {
                        editIndex = index;
                        isEditing.value = true;

                        // 取得選中的商品
                        const selectedProduct = products.value[index];

                        // ✅ 轉換日期格式 (如果日期存在，轉換為 YYYY-MM-DD)
                        formData.value = {
                            ...selectedProduct,
                            validFrom: selectedProduct.validFrom ? new Date(selectedProduct.PublishDate).toISOString().split('T')[0] : "",
                     
                        };
                    } else {
                        resetForm();
                        isEditing.value = false;
                    }

                    modalInstance.show();
                };


                // 送出表單（新增或編輯）
                const handleSubmit = async () => {
                    try {
                        const method = isEditing.value ? "PUT" : "POST";
                        const url = isEditing.value ? `${apiUrl}/${formData.value.id}` : apiUrl;

                        await fetch(url, {
                            method,
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify(formData.value),
                        });

                        modalInstance.hide();
                        loadProducts();
                    } catch (error) {
                        console.error("操作失敗:", error);
                    }
                };

                // 刪除商品
                const deleteProduct = async (id) => {
                    try {
                        await fetch(`${apiUrl}/${id}`, { method: "DELETE" });
                        loadProducts();
                    } catch (error) {
                        console.error("刪除失敗:", error);
                    }
                };

                // 重置表單
                const resetForm = () => {
                    formData.value = { id: null, title: "", author: "", publisher: "", price: null, description: "", categoryId: null, promotionId: null, publishDate: "", imageURL: "" };
                };

                onMounted(loadProducts);

                return { products, formData, isEditing, handleSubmit, deleteProduct, openModal };
            }
        }).mount("#app");
    </script>
</body>
</html>
